DEFINE_ACTION_FUNCTION ADD_BAM_FRAME
	INT_VAR
		seq           = 0
	STR_VAR
		path_to_bam   = ~~ //path/filename.bam
		patch_to_pvrz = ~~ //path
		bam_to_add    = ~~ //title.bam without ".bam"
	RET
		new_frame_index
BEGIN
	OUTER_SET new_frame_index  = "-1"
	OUTER_SET blocks_to_add    = 0

	COPY - ~%path_to_bam%~ ~%path_to_bam%~
		READ_LONG   0x08 frame_cnt
		READ_LONG   0x0c cycle_cnt
		READ_LONG   0x10 datas_cnt
		READ_LONG   0x14 frame_off
		READ_LONG   0x18 cycle_off
		READ_LONG   0x1c datas_off
		READ_SHORT  cycle_off + 0x00 frm_cyc_cnt
		READ_SHORT  cycle_off + 0x02 start_cyc_cnt
		PATCH_IF ( frame_cnt > 1 ) OR ( cycle_cnt > 1 ) BEGIN
			PATCH_FAIL ~ADD_BAM_FRAME: Count of cycles or frames in %path_to_bam% greater than 1...~
		END
		READ_SHORT  ( frame_off + 0x00 ) frame_width
		READ_SHORT  ( frame_off + 0x02 ) frame_height
		READ_SHORT  ( frame_off + 0x04 ) frame_x
		READ_SHORT  ( frame_off + 0x06 ) frame_y
		READ_SHORT  ( frame_off + 0x08 ) start_block
		READ_SHORT  ( frame_off + 0x0a ) data_blocks_cnt
		FOR ( i = 0 ; i < data_blocks_cnt ; ++i ) BEGIN
			SET block = start_block + i
			READ_LONG ( datas_off + 0x1c * block + 0x00 ) block_pvrz
			READ_LONG ( datas_off + 0x1c * block + 0x04 ) block_srcX
			READ_LONG ( datas_off + 0x1c * block + 0x08 ) block_srcY
			READ_LONG ( datas_off + 0x1c * block + 0x0c ) block_width
			READ_LONG ( datas_off + 0x1c * block + 0x10 ) block_height
			READ_LONG ( datas_off + 0x1c * block + 0x14 ) block_trgX
			READ_LONG ( datas_off + 0x1c * block + 0x18 ) block_trgY
			DEFINE_ASSOCIATIVE_ARRAY blocks_tbl BEGIN ~%block%~, ~%block_srcX%~, ~%block_srcY%~, ~%block_width%~, ~%block_height%~, ~%block_trgX%~, ~%block_trgY%~ => ~%block_pvrz%~ END
		END

	ACTION_PHP_EACH blocks_tbl AS data => block_pvrz BEGIN
		OUTER_SET blocks_to_add = blocks_to_add + 1
	END

	COPY_EXISTING ~%bam_to_add%.bam~ ~override~
		READ_LONG   0x08 frame_cnt
		READ_LONG   0x0c cycle_cnt
		READ_LONG   0x10 datas_cnt
		READ_LONG   0x14 frame_off
		READ_LONG   0x18 cycle_off
		READ_LONG   0x1c datas_off
		SET sdatas_off = datas_off
		WRITE_LONG  0x08 frame_cnt + 1
		WRITE_LONG  0x10 datas_cnt + blocks_to_add
		PATCH_IF ( cycle_off >= frame_off ) BEGIN WRITE_LONG  0x18 cycle_off + 0x0c END
		PATCH_IF ( datas_off >= frame_off ) BEGIN WRITE_LONG  0x1c datas_off + 0x0c SET sdatas_off = datas_off + 0x0c END
		READ_SHORT cycle_off frmidx
		PATCH_IF ( seq != 0 ) BEGIN
			PATCH_IF ( sdatas_off >= cycle_off ) BEGIN WRITE_LONG  0x1c sdatas_off + 0x04 SET sdatas_off = sdatas_off + 0x04 END
			WRITE_LONG 0x0c cycle_cnt + 1
			SET cycle_insert = cycle_off + cycle_cnt * 0x04
			INSERT_BYTES cycle_insert 0x04
				WRITE_SHORT cycle_insert + 0x00 1
				WRITE_SHORT cycle_insert + 0x02 frame_cnt
			SET new_frame_index = cycle_cnt
		END ELSE BEGIN
			WRITE_SHORT cycle_off ( ( SHORT_AT cycle_off ) + 1 )
			SET new_frame_index = frame_cnt
		END
		SET frame_insert = frame_off + 0x0c * frame_cnt
		INSERT_BYTES frame_insert 0x0c
			WRITE_SHORT frame_insert + 0x00 frame_width
			WRITE_SHORT frame_insert + 0x02 frame_height
			WRITE_SHORT frame_insert + 0x04 frame_x
			WRITE_SHORT frame_insert + 0x06 frame_y
			READ_SHORT  frame_insert + 0x08 - 0x0c old_start_block
			READ_SHORT  frame_insert + 0x0a - 0x0c old_data_blocks_cnt
			SET new_start_block = old_start_block + old_data_blocks_cnt
			WRITE_SHORT frame_insert + 0x08 new_start_block
			WRITE_SHORT frame_insert + 0x0a data_blocks_cnt
		LPF FIND_FREE_PVRZ_INDEX RET free_index END
		SET free_index_cnt = 0
		i = 0
		INSERT_BYTES sdatas_off + 0x1c * datas_cnt blocks_to_add * 0x1c
		PHP_EACH blocks_tbl AS data => block_pvrz BEGIN
			PATCH_IF ( VARIABLE_IS_SET $remapped_pvrz(~%block_pvrz%~) ) BEGIN
				TEXT_SPRINT new_block_page $remapped_pvrz(~%block_pvrz%~)
			END ELSE BEGIN
				SET new_block_page = free_index + free_index_cnt
				DEFINE_ASSOCIATIVE_ARRAY remapped_pvrz BEGIN ~%block_pvrz%~ => ~%new_block_page%~ END
				SET free_index_cnt = free_index_cnt + 1
			END
			SET blocks_insert = sdatas_off + 0x1c * ( datas_cnt + i )
			WRITE_LONG blocks_insert + 0x00 new_block_page
			WRITE_LONG blocks_insert + 0x04 ~%data_1%~
			WRITE_LONG blocks_insert + 0x08 ~%data_2%~
			WRITE_LONG blocks_insert + 0x0c ~%data_3%~
			WRITE_LONG blocks_insert + 0x10 ~%data_4%~
			WRITE_LONG blocks_insert + 0x14 ~%data_5%~
			WRITE_LONG blocks_insert + 0x18 ~%data_6%~
			i = i + 1
		END
		BUT_ONLY_IF_IT_CHANGES
	
	ACTION_PHP_EACH remapped_pvrz AS block_page => new_block_page BEGIN
		ACTION_FOR_EACH index IN block_page new_block_page BEGIN
			OUTER_SET value = EVAL ~%index%~
			ACTION_IF (value < 10) BEGIN
				OUTER_SPRINT EVAL ~%index%~ ~000%value%~
			END ELSE ACTION_IF (value < 100) BEGIN
				OUTER_SPRINT EVAL ~%index%~ ~00%value%~
			END ELSE ACTION_IF (value < 1000) BEGIN
				OUTER_SPRINT EVAL ~%index%~ ~0%value%~
			END ELSE BEGIN
				OUTER_SPRINT EVAL ~%index%~ ~%value%~
			END
		END
		COPY_LARGE ~%patch_to_pvrz%/mos%block_page%.pvrz~ ~override/mos%new_block_page%.pvrz~
	END
END





















